// Code generated for vipshark78 service
// Â© vipshark78 2025.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/vipshark78/microservices-course-homeworks/order/internal/model"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

type OrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderService) EXPECT() *OrderService_Expecter {
	return &OrderService_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, userUuid, partUuids
func (_m *OrderService) CreateOrder(ctx context.Context, userUuid string, partUuids []string) (model.Order, error) {
	ret := _m.Called(ctx, userUuid, partUuids)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (model.Order, error)); ok {
		return rf(ctx, userUuid, partUuids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) model.Order); ok {
		r0 = rf(ctx, userUuid, partUuids)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, userUuid, partUuids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrderService_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - userUuid string
//   - partUuids []string
func (_e *OrderService_Expecter) CreateOrder(ctx interface{}, userUuid interface{}, partUuids interface{}) *OrderService_CreateOrder_Call {
	return &OrderService_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, userUuid, partUuids)}
}

func (_c *OrderService_CreateOrder_Call) Run(run func(ctx context.Context, userUuid string, partUuids []string)) *OrderService_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *OrderService_CreateOrder_Call) Return(_a0 model.Order, _a1 error) *OrderService_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_CreateOrder_Call) RunAndReturn(run func(context.Context, string, []string) (model.Order, error)) *OrderService_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// OrderByUUID provides a mock function with given fields: ctx, orderUuid
func (_m *OrderService) OrderByUUID(ctx context.Context, orderUuid string) (model.Order, error) {
	ret := _m.Called(ctx, orderUuid)

	if len(ret) == 0 {
		panic("no return value specified for OrderByUUID")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Order, error)); ok {
		return rf(ctx, orderUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Order); ok {
		r0 = rf(ctx, orderUuid)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_OrderByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderByUUID'
type OrderService_OrderByUUID_Call struct {
	*mock.Call
}

// OrderByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUuid string
func (_e *OrderService_Expecter) OrderByUUID(ctx interface{}, orderUuid interface{}) *OrderService_OrderByUUID_Call {
	return &OrderService_OrderByUUID_Call{Call: _e.mock.On("OrderByUUID", ctx, orderUuid)}
}

func (_c *OrderService_OrderByUUID_Call) Run(run func(ctx context.Context, orderUuid string)) *OrderService_OrderByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderService_OrderByUUID_Call) Return(_a0 model.Order, _a1 error) *OrderService_OrderByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_OrderByUUID_Call) RunAndReturn(run func(context.Context, string) (model.Order, error)) *OrderService_OrderByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// OrderCancel provides a mock function with given fields: ctx, orderUuid
func (_m *OrderService) OrderCancel(ctx context.Context, orderUuid string) error {
	ret := _m.Called(ctx, orderUuid)

	if len(ret) == 0 {
		panic("no return value specified for OrderCancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, orderUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderService_OrderCancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderCancel'
type OrderService_OrderCancel_Call struct {
	*mock.Call
}

// OrderCancel is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUuid string
func (_e *OrderService_Expecter) OrderCancel(ctx interface{}, orderUuid interface{}) *OrderService_OrderCancel_Call {
	return &OrderService_OrderCancel_Call{Call: _e.mock.On("OrderCancel", ctx, orderUuid)}
}

func (_c *OrderService_OrderCancel_Call) Run(run func(ctx context.Context, orderUuid string)) *OrderService_OrderCancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderService_OrderCancel_Call) Return(_a0 error) *OrderService_OrderCancel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderService_OrderCancel_Call) RunAndReturn(run func(context.Context, string) error) *OrderService_OrderCancel_Call {
	_c.Call.Return(run)
	return _c
}

// OrderPay provides a mock function with given fields: ctx, orderUuid, paymentMethod
func (_m *OrderService) OrderPay(ctx context.Context, orderUuid string, paymentMethod string) (string, error) {
	ret := _m.Called(ctx, orderUuid, paymentMethod)

	if len(ret) == 0 {
		panic("no return value specified for OrderPay")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, orderUuid, paymentMethod)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, orderUuid, paymentMethod)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, orderUuid, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_OrderPay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderPay'
type OrderService_OrderPay_Call struct {
	*mock.Call
}

// OrderPay is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUuid string
//   - paymentMethod string
func (_e *OrderService_Expecter) OrderPay(ctx interface{}, orderUuid interface{}, paymentMethod interface{}) *OrderService_OrderPay_Call {
	return &OrderService_OrderPay_Call{Call: _e.mock.On("OrderPay", ctx, orderUuid, paymentMethod)}
}

func (_c *OrderService_OrderPay_Call) Run(run func(ctx context.Context, orderUuid string, paymentMethod string)) *OrderService_OrderPay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrderService_OrderPay_Call) Return(_a0 string, _a1 error) *OrderService_OrderPay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_OrderPay_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *OrderService_OrderPay_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
