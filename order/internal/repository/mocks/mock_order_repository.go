// Code generated for vipshark78 service
// Â© vipshark78 2025.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/vipshark78/microservices-course-homeworks/order/internal/model"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

type OrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepository) EXPECT() *OrderRepository_Expecter {
	return &OrderRepository_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: ctx, userUuid, partUuids, price
func (_m *OrderRepository) Insert(ctx context.Context, userUuid string, partUuids []string, price float64) (model.Order, error) {
	ret := _m.Called(ctx, userUuid, partUuids, price)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, float64) (model.Order, error)); ok {
		return rf(ctx, userUuid, partUuids, price)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, float64) model.Order); ok {
		r0 = rf(ctx, userUuid, partUuids, price)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, float64) error); ok {
		r1 = rf(ctx, userUuid, partUuids, price)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type OrderRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - userUuid string
//   - partUuids []string
//   - price float64
func (_e *OrderRepository_Expecter) Insert(ctx interface{}, userUuid interface{}, partUuids interface{}, price interface{}) *OrderRepository_Insert_Call {
	return &OrderRepository_Insert_Call{Call: _e.mock.On("Insert", ctx, userUuid, partUuids, price)}
}

func (_c *OrderRepository_Insert_Call) Run(run func(ctx context.Context, userUuid string, partUuids []string, price float64)) *OrderRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].(float64))
	})
	return _c
}

func (_c *OrderRepository_Insert_Call) Return(_a0 model.Order, _a1 error) *OrderRepository_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_Insert_Call) RunAndReturn(run func(context.Context, string, []string, float64) (model.Order, error)) *OrderRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, uuid
func (_m *OrderRepository) Read(ctx context.Context, uuid string) (model.Order, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Order, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Order); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type OrderRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *OrderRepository_Expecter) Read(ctx interface{}, uuid interface{}) *OrderRepository_Read_Call {
	return &OrderRepository_Read_Call{Call: _e.mock.On("Read", ctx, uuid)}
}

func (_c *OrderRepository_Read_Call) Run(run func(ctx context.Context, uuid string)) *OrderRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderRepository_Read_Call) Return(_a0 model.Order, _a1 error) *OrderRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_Read_Call) RunAndReturn(run func(context.Context, string) (model.Order, error)) *OrderRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: order
func (_m *OrderRepository) Update(order model.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type OrderRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - order model.Order
func (_e *OrderRepository_Expecter) Update(order interface{}) *OrderRepository_Update_Call {
	return &OrderRepository_Update_Call{Call: _e.mock.On("Update", order)}
}

func (_c *OrderRepository_Update_Call) Run(run func(order model.Order)) *OrderRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Order))
	})
	return _c
}

func (_c *OrderRepository_Update_Call) Return(_a0 error) *OrderRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_Update_Call) RunAndReturn(run func(model.Order) error) *OrderRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
