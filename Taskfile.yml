version: '3'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
vars:
  GO_VERSION: '1.25.3'
  GOLANGCI_LINT_VERSION: 'v2.1.5'
  GCI_VERSION: 'v0.13.6'
  GOFUMPT_VERSION: 'v0.8.0'
  BUF_VERSION: '1.53.0'
  PROTOC_GEN_GO_VERSION: 'v1.36.6'
  PROTOC_GEN_GO_GRPC_VERSION: 'v1.5.1'
  OGEN_VERSION: 'v1.12.0'
  YQ_VERSION: 'v4.45.2'
  GRPCURL_VERSION: 'v1.9.3'

  BIN_DIR: '{{.ROOT_DIR}}/bin'
  GOLANGCI_LINT: '{{.BIN_DIR}}/golangci-lint'
  GCI: '{{.BIN_DIR}}/gci'
  GOFUMPT: '{{.BIN_DIR}}/gofumpt'
  BUF: '{{.BIN_DIR}}/buf'
  OGEN: '{{.BIN_DIR}}/ogen'
  YQ: '{{.BIN_DIR}}/yq'
  PROTOC_GEN_GO: '{{.BIN_DIR}}/protoc-gen-go'
  PROTOC_GEN_GO_GRPC: '{{.BIN_DIR}}/protoc-gen-go-grpc'
  GRPCURL: '{{.BIN_DIR}}/grpcurl'

  NODE_MODULES_DIR: '{{.ROOT_DIR}}/node_modules/.bin'
  REDOCLY: '{{.NODE_MODULES_DIR}}/redocly'

  OPEN_API_ORDER_V1_BASE: '{{.ROOT_DIR}}/shared/api/order/v1/order.openapi.yaml'
  OPEN_API_ORDER_V1_BUNDLE: '{{.ROOT_DIR}}/shared/api/bundles/order.openapi.v1.bundle.yaml'

  OPEN_API_FILES: '{{.ROOT_DIR}}/shared/api/bundles'

  MODULES: assembly inventory order payment platform iam notification

tasks:
  install-formatters:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã gci –∏ gofumpt –≤ ./bin"
    summary: |
      –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ gofumpt –∏ gci –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ bin.
      –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏.
      
      –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
        - gofumpt: –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ Go
        - gci: –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ Go
    cmds:
      - |
        [ -f {{.GOFUMPT}} ] || {
          echo 'üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gofumpt {{.GOFUMPT_VERSION}}...'
          GOBIN={{.BIN_DIR}} go install mvdan.cc/gofumpt@{{.GOFUMPT_VERSION}}
        }
        [ -f {{.GCI}} ] || {
          echo 'üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gci {{.GCI_VERSION}}...'
          GOBIN={{.BIN_DIR}} go install github.com/daixiang0/gci@{{.GCI_VERSION}}
        }
    status:
      - test -x {{.GOFUMPT}}
      - test -x {{.GCI}}

  format:
    desc: "–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç gofumpt + gci, –∏—Å–∫–ª—é—á–∞—è mocks"
    summary: |
      –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ Go-—Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º gofumpt –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞
      –∏ gci –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö mocks.
      
      –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
        - gofumpt: –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        - gci: –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
    deps: [ install-formatters ]
    cmds:
      - |
        echo "üßº –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ gofumpt ..."
        
        for module in {{.MODULES}}; do
          if [ -d "$module" ]; then
            echo "üßº –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º $module"
            find $module -type f -name '*.go' ! -path '*/mocks/*' -exec {{.GOFUMPT}} -extra -w {} +
          fi
        done
      - |
        echo "üéØ –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã —á–µ—Ä–µ–∑ gci ..."
        
        for module in {{.MODULES}}; do
          if [ -d "$module" ]; then
            echo "üéØ –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ $module"
            find $module -type f -name '*.go' ! -path '*/mocks/*' -exec {{.GCI}} write -s standard -s default -s "prefix(github.com/vipshark78/microservices-course-homeworks)" {} +
          fi
        done

  install-golangci-lint:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç golangci-lint –≤ –∫–∞—Ç–∞–ª–æ–≥ bin"
    summary: |
      –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ golangci-lint –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ bin.
      –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ go install.
      
      –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: {{.GOLANGCI_LINT_VERSION}}
    cmds:
      - |
        [ -f {{.GOLANGCI_LINT}} ] || {
          mkdir -p {{.BIN_DIR}}
          echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º golangci-lint {{.GOLANGCI_LINT_VERSION}}..."
          GOBIN={{.BIN_DIR}} go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@{{.GOLANGCI_LINT_VERSION}}
        }
    status:
      - test -x {{.GOLANGCI_LINT}}

  lint:
    desc: "–ó–∞–ø—É—Å–∫–∞–µ—Ç golangci-lint –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"
    summary: |
      –ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–∏–Ω—Ç–µ—Ä golangci-lint –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞.
      –õ–∏–Ω—Ç–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º.
      –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ gosec (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ golangci-lint).
      
      –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
        - install-golangci-lint: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–Ω—Ç–µ—Ä
        - format: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    deps: [ install-golangci-lint ]
    vars:
      MODULES: '{{.MODULES}}'
      GOLANGCI_LINT: '{{.GOLANGCI_LINT}}'
    cmds:
      - |
        set -e
        ERR=0
        echo "üîç –õ–∏–Ω—Ç–∏–º –≤—Å–µ –º–æ–¥—É–ª–∏ ..."
        for mod in {{.MODULES}}; do
          if [ -d "$mod" ]; then
            echo "üîç –õ–∏–Ω—Ç–∏–º $mod module"
            {{.GOLANGCI_LINT}} run $mod/... --config=.golangci.yml || ERR=1
          fi
        done
        exit $ERR

  install-buf:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Buf –≤ –∫–∞—Ç–∞–ª–æ–≥ bin"
    cmds:
      - |
        [ -f {{.BUF}} ] || {
          mkdir -p {{.BIN_DIR}} tmp-buf
          curl -sSL \
            "https://github.com/bufbuild/buf/releases/download/v{{.BUF_VERSION}}/buf-$(uname -s)-$(uname -m).tar.gz" \
            | tar -xz -C tmp-buf
          mv tmp-buf/buf/bin/buf {{.BUF}}
          rm -rf tmp-buf
          chmod +x {{.BUF}}
        }

  proto:install-plugins:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç protoc –ø–ª–∞–≥–∏–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥ bin"
    cmds:
      - |
        [ -f {{.PROTOC_GEN_GO}} ] || {
          echo 'üì¶ Installing protoc-gen-go...'
          GOBIN={{.BIN_DIR}} go install google.golang.org/protobuf/cmd/protoc-gen-go@{{.PROTOC_GEN_GO_VERSION}}
        }
        [ -f {{.PROTOC_GEN_GO_GRPC}} ] || {
          echo 'üì¶ Installing protoc-gen-go-grpc...'
          GOBIN={{.BIN_DIR}} go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@{{.PROTOC_GEN_GO_GRPC_VERSION}}
        }

  proto:gen:
    deps: [ install-buf, proto:install-plugins, proto:lint ]
    desc: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Go-–∫–æ–¥–∞ –∏–∑ .proto
    dir: shared/proto
    cmds:
      - '{{.BUF}} generate'

  proto:lint:
    deps: [ install-buf, proto:install-plugins ]
    desc: –ü—Ä–æ–≤–µ—Ä–∫–∞ .proto-—Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∏–ª—é
    dir: shared/proto
    cmds:
      - '{{.BUF}} lint'

  redocly-cli:install:
    desc: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ Redocly CLI
    cmds:
      - |
        [ -f {{.REDOCLY}} ] || {
          npm ci
        }

  redocly-cli:order-v1-bundle:
    desc: –°–æ–±—Ä–∞—Ç—å OpenAPI –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π redocly
    deps: [ redocly-cli:install ]
    cmds:
      - '{{.REDOCLY}} bundle {{.OPEN_API_ORDER_V1_BASE}} -o {{.OPEN_API_ORDER_V1_BUNDLE}}'

  redocly-cli:bundle:
    desc: –°–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ö–µ–º—ã OpenAPI –≤ –æ–±—â–∏–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π redocly
    deps: [ redocly-cli:install ]
    cmds:
      - task: redocly-cli:order-v1-bundle

  ogen:install:
    desc: "–°–∫–∞—á–∏–≤–∞–µ—Ç ogen –≤ –ø–∞–ø–∫—É bin"
    cmds:
      - |
        [ -f {{.OGEN}} ] || {
          mkdir -p {{.BIN_DIR}}
          GOBIN={{.BIN_DIR}} go install github.com/ogen-go/ogen/cmd/ogen@{{.OGEN_VERSION}}
        }

  ogen:gen:
    desc: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Go-–∫–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö OpenAPI-–¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π —Å x-ogen"
    deps: [ ogen:install, yq:install ]
    cmds:
      - task: redocly-cli:bundle
      - |
        find {{.OPEN_API_FILES}} -name '*.yaml' -o -name '*.yml' | while read -r file; do
          if [ -f "$file" ] && grep -q 'x-ogen:' "$file"; then
            echo "üöÄ Generating from: $file"
            target=$({{.YQ}} e '."x-ogen".target' "$file")
            package=$({{.YQ}} e '."x-ogen".package' "$file")
            echo "üìÅ Target: $target"
            echo "üì¶ Package: $package"
            {{.OGEN}} \
              --target "$target" \
              --package "$package" \
              --clean \
              "$file" || exit 1
          fi
        done

  gen:
    desc: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö proto –∏ OpenAPI –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π"
    cmds:
      - task: proto:gen
      - task: ogen:gen

  deps:update:
    desc: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ go.mod –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö"
    cmds:
      - |
        echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ go.mod –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö"
        for mod in {{.MODULES}}; do
          if [ -d "$mod" ]; then
            echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ $mod"
            (cd "$mod" && go mod tidy -compat=1.24) || exit 1
          fi
        done

  yq:install:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç yq –≤ bin/ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
    cmds:
      - |
        [ -f {{.YQ}} ] || {
          echo 'üì¶ Installing yq...'
          GOBIN={{.BIN_DIR}} go install github.com/mikefarah/yq/v4@{{.YQ_VERSION}}
        }

  grpcurl:install:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç grpcurl –≤ –∫–∞—Ç–∞–ª–æ–≥ bin"
    cmds:
      - |
        [ -f {{.GRPCURL}} ] || {
          echo 'üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º grpcurl {{.GRPCURL_VERSION}}...'
          GOBIN={{.BIN_DIR}} go install github.com/fullstorydev/grpcurl/cmd/grpcurl@{{.GRPCURL_VERSION}}
        }
    status:
      - test -x {{.GRPCURL}}

  test-api:
    desc: "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"
    deps: [ grpcurl:install ]
    cmds:
      - |
        echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ gRPC –∏ REST"
        
        echo "üì¶ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∏–∑ Inventory"
        PARTS_RESPONSE=$({{.GRPCURL}} -plaintext -d '{"filter":{}}' localhost:50051 inventory.v1.InventoryService/ListParts)
        
        if [[ -z "$PARTS_RESPONSE" || "$PARTS_RESPONSE" == *"error"* ]]; then
          echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π."
          echo "üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $PARTS_RESPONSE"
          exit 1
        fi
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –ø–µ—Ä–≤–æ–π –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
        PART_UUID=$(echo $PARTS_RESPONSE | grep -o '"uuid": "[^"]*' | head -1 | cut -d'"' -f4)
        if [ -z "$PART_UUID" ]; then
          echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ UUID –¥–µ—Ç–∞–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ."
          echo "üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $PARTS_RESPONSE"
          exit 1
        fi
        echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π, –ø–µ—Ä–≤–∞—è UUID: $PART_UUID"
        
        echo
        echo "üîç –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ç–∞–ª–∏ –ø–æ UUID"
        PART_RESPONSE=$({{.GRPCURL}} -plaintext -d "{\"uuid\":\"$PART_UUID\"}" localhost:50051 inventory.v1.InventoryService/GetPart)
        
        if [[ -z "$PART_RESPONSE" || "$PART_RESPONSE" == *"error"* ]]; then
          echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç–∞–ª–∏."
          echo "üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $PART_RESPONSE"
          exit 1
        fi
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –¥–µ—Ç–∞–ª–∏ 
        PART_NAME=$(echo $PART_RESPONSE | grep -o '"name": "[^"]*' | cut -d'"' -f4)
        if [ -z "$PART_NAME" ]; then
          echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –¥–µ—Ç–∞–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞."
          echo "üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $PART_RESPONSE"
          exit 1
        fi
        echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –¥–µ—Ç–∞–ª—å: $PART_NAME"
        
        echo
        echo "üë§ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        USER_UUID=$(uuidgen | tr '[:upper:]' '[:lower:]')
        echo "‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $USER_UUID"
        
        echo
        echo "üìù –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (REST API)"
        ORDER_RESPONSE=$(curl -s -X POST "http://localhost:8080/api/v1/orders" \
          -H "Content-Type: application/json" \
          -d "{\"user_uuid\":\"$USER_UUID\",\"part_uuids\":[\"$PART_UUID\"]}")
        
        if [[ -z "$ORDER_RESPONSE" || "$ORDER_RESPONSE" == *"error"* ]]; then
          echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑."
          echo "üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $ORDER_RESPONSE"
          exit 1
        fi
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ JSON
        ORDER_UUID=$(echo $ORDER_RESPONSE | grep -o '"order_uuid":"[^"]*' | cut -d'"' -f4)
        if [ -z "$ORDER_UUID" ]; then
          ORDER_UUID=$(echo $ORDER_RESPONSE | grep -o '"order_uuid": "[^"]*' | cut -d'"' -f4)
          if [ -z "$ORDER_UUID" ]; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å UUID –∑–∞–∫–∞–∑–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞."
            echo "üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $ORDER_RESPONSE"
            exit 1
          fi
        fi
        echo "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ —Å UUID: $ORDER_UUID"
        
        echo
        echo "üìä –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PENDING_PAYMENT)"
        ORDER_INFO_RESPONSE=$(curl -s -X GET "http://localhost:8080/api/v1/orders/$ORDER_UUID")
        
        if [[ -z "$ORDER_INFO_RESPONSE" || "$ORDER_INFO_RESPONSE" == *"error"* ]]; then
          echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ."
          echo "üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $ORDER_INFO_RESPONSE"
          exit 1
        fi
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ JSON
        ORDER_STATUS=$(echo $ORDER_INFO_RESPONSE | grep -o '"status":"[^"]*' | cut -d'"' -f4)
        if [ -z "$ORDER_STATUS" ]; then
          ORDER_STATUS=$(echo $ORDER_INFO_RESPONSE | grep -o '"status": "[^"]*' | cut -d'"' -f4)
          if [ -z "$ORDER_STATUS" ]; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞."
            echo "üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $ORDER_INFO_RESPONSE"
            exit 1
          fi
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å PENDING_PAYMENT
        if [[ "$ORDER_STATUS" != *"PENDING_PAYMENT"* ]]; then
          echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞. –û–∂–∏–¥–∞–ª—Å—è PENDING_PAYMENT, –ø–æ–ª—É—á–µ–Ω: $ORDER_STATUS"
          exit 1
        fi
        echo "‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: $ORDER_STATUS"
        
        echo
        echo "üí∞ –¢–µ—Å—Ç 6: –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ (REST API)"
        PAY_RESPONSE=$(curl -s -X POST "http://localhost:8080/api/v1/orders/$ORDER_UUID/pay" \
          -H "Content-Type: application/json" \
          -d "{\"payment_method\":\"CARD\"}")
        
        if [[ "$PAY_RESPONSE" == *"error"* ]]; then
          echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞."
          echo "üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $PAY_RESPONSE"
          exit 1
        fi
        echo "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω"
        
        echo
        echo "üìä –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PAID)"
        ORDER_INFO_RESPONSE=$(curl -s -X GET "http://localhost:8080/api/v1/orders/$ORDER_UUID")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        ORDER_STATUS=$(echo $ORDER_INFO_RESPONSE | grep -o '"status":"[^"]*' | cut -d'"' -f4)
        if [ -z "$ORDER_STATUS" ]; then
          ORDER_STATUS=$(echo $ORDER_INFO_RESPONSE | grep -o '"status": "[^"]*' | cut -d'"' -f4)
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–ª PAID
        if [[ "$ORDER_STATUS" != *"PAID"* && "$ORDER_STATUS" != *"ASSEMBLED"* ]]; then
          echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –û–∂–∏–¥–∞–ª—Å—è PAID –∏–ª–∏ ASSEMBLED, –ø–æ–ª—É—á–µ–Ω: $ORDER_STATUS"
          exit 1
        fi
        echo "‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: $ORDER_STATUS"
        
        echo
        echo "üìù –¢–µ—Å—Ç 8: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã (REST API)"
        ORDER2_RESPONSE=$(curl -s -X POST "http://localhost:8080/api/v1/orders" \
          -H "Content-Type: application/json" \
          -d "{\"user_uuid\":\"$USER_UUID\",\"part_uuids\":[\"$PART_UUID\"]}")
        
        if [[ -z "$ORDER2_RESPONSE" || "$ORDER2_RESPONSE" == *"error"* ]]; then
          echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–π –∑–∞–∫–∞–∑."
          echo "üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $ORDER2_RESPONSE"
          exit 1
        fi
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ JSON
        ORDER2_UUID=$(echo $ORDER2_RESPONSE | grep -o '"order_uuid":"[^"]*' | cut -d'"' -f4)
        if [ -z "$ORDER2_UUID" ]; then
          ORDER2_UUID=$(echo $ORDER2_RESPONSE | grep -o '"order_uuid": "[^"]*' | cut -d'"' -f4)
          if [ -z "$ORDER2_UUID" ]; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å UUID –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞."
            echo "üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $ORDER2_RESPONSE"
            exit 1
          fi
        fi
        echo "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤—Ç–æ—Ä–æ–π –∑–∞–∫–∞–∑ —Å UUID: $ORDER2_UUID"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        ORDER2_INFO=$(curl -s -X GET "http://localhost:8080/api/v1/orders/$ORDER2_UUID")
        ORDER2_STATUS=$(echo $ORDER2_INFO | grep -o '"status":"[^"]*' | cut -d'"' -f4)
        if [ -z "$ORDER2_STATUS" ]; then
          ORDER2_STATUS=$(echo $ORDER2_INFO | grep -o '"status": "[^"]*' | cut -d'"' -f4)
        fi
        
        if [[ "$ORDER2_STATUS" != *"PENDING_PAYMENT"* ]]; then
          echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞. –û–∂–∏–¥–∞–ª—Å—è PENDING_PAYMENT, –ø–æ–ª—É—á–µ–Ω: $ORDER2_STATUS"
          exit 1
        fi
        echo "‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞: $ORDER2_STATUS"
        
        echo
        echo "‚ùå –¢–µ—Å—Ç 9: –û—Ç–º–µ–Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ (REST API)"
        echo "–û–∂–∏–¥–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π..."
        sleep 2
        
        curl -s -X POST "http://localhost:8080/api/v1/orders/$ORDER2_UUID/cancel"
        
        echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã..."
        
        ORDER2_INFO=$(curl -s -X GET "http://localhost:8080/api/v1/orders/$ORDER2_UUID")
        ORDER2_STATUS=$(echo $ORDER2_INFO | grep -o '"status":"[^"]*' | cut -d'"' -f4)
        if [ -z "$ORDER2_STATUS" ]; then
          ORDER2_STATUS=$(echo $ORDER2_INFO | grep -o '"status": "[^"]*' | cut -d'"' -f4)
        fi
        
        if [[ "$ORDER2_STATUS" != *"CANCELLED"* ]]; then
          echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞. –û–∂–∏–¥–∞–ª—Å—è CANCELLED, –ø–æ–ª—É—á–µ–Ω: $ORDER2_STATUS"
          echo "üîç –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞: $ORDER2_INFO"
          exit 1
        fi
        echo "‚úÖ –°—Ç–∞—Ç—É—Å –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: $ORDER2_STATUS"
        
        echo
        echo "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã API —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
