// Code generated for vipshark78 service
// Â© vipshark78 2025.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/vipshark78/microservices-course-homeworks/inventory/internal/model"
)

// InventoryService is an autogenerated mock type for the InventoryService type
type InventoryService struct {
	mock.Mock
}

type InventoryService_Expecter struct {
	mock *mock.Mock
}

func (_m *InventoryService) EXPECT() *InventoryService_Expecter {
	return &InventoryService_Expecter{mock: &_m.Mock}
}

// GetPart provides a mock function with given fields: ctx, uuid
func (_m *InventoryService) GetPart(ctx context.Context, uuid string) (model.Part, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetPart")
	}

	var r0 model.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Part, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Part); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(model.Part)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InventoryService_GetPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPart'
type InventoryService_GetPart_Call struct {
	*mock.Call
}

// GetPart is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *InventoryService_Expecter) GetPart(ctx interface{}, uuid interface{}) *InventoryService_GetPart_Call {
	return &InventoryService_GetPart_Call{Call: _e.mock.On("GetPart", ctx, uuid)}
}

func (_c *InventoryService_GetPart_Call) Run(run func(ctx context.Context, uuid string)) *InventoryService_GetPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *InventoryService_GetPart_Call) Return(_a0 model.Part, _a1 error) *InventoryService_GetPart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InventoryService_GetPart_Call) RunAndReturn(run func(context.Context, string) (model.Part, error)) *InventoryService_GetPart_Call {
	_c.Call.Return(run)
	return _c
}

// ListParts provides a mock function with given fields: ctx, filter
func (_m *InventoryService) ListParts(ctx context.Context, filter model.PartsFilter) ([]model.Part, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListParts")
	}

	var r0 []model.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PartsFilter) ([]model.Part, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PartsFilter) []model.Part); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Part)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PartsFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InventoryService_ListParts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListParts'
type InventoryService_ListParts_Call struct {
	*mock.Call
}

// ListParts is a helper method to define mock.On call
//   - ctx context.Context
//   - filter model.PartsFilter
func (_e *InventoryService_Expecter) ListParts(ctx interface{}, filter interface{}) *InventoryService_ListParts_Call {
	return &InventoryService_ListParts_Call{Call: _e.mock.On("ListParts", ctx, filter)}
}

func (_c *InventoryService_ListParts_Call) Run(run func(ctx context.Context, filter model.PartsFilter)) *InventoryService_ListParts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.PartsFilter))
	})
	return _c
}

func (_c *InventoryService_ListParts_Call) Return(_a0 []model.Part, _a1 error) *InventoryService_ListParts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InventoryService_ListParts_Call) RunAndReturn(run func(context.Context, model.PartsFilter) ([]model.Part, error)) *InventoryService_ListParts_Call {
	_c.Call.Return(run)
	return _c
}

// NewInventoryService creates a new instance of InventoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInventoryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *InventoryService {
	mock := &InventoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
